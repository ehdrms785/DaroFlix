{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\React\\\\DaroFlix\\\\src\\\\Routes\\\\Detail\\\\DetailContainer.js\";\nimport React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport { movieApi, tvApi } from \"../../api\";\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getData = async () => {\n      const {\n        match: {\n          params: {\n            id\n          }\n        },\n        history: {\n          push\n        }\n      } = this.props;\n      const {\n        isMovie\n      } = this.state;\n      const parsedIntId = parseInt(id);\n\n      if (isNaN(parsedIntId)) {\n        return push(\"/\");\n      }\n\n      let result = null;\n      let casts_result = null;\n      let recommends_result = null;\n\n      try {\n        if (isMovie) {\n          ({\n            data: result\n          } = await movieApi.movieDetail(parsedIntId));\n          ({\n            data: {\n              cast: casts_result\n            }\n          } = await movieApi.getCasts(parsedIntId));\n          ({\n            data: {\n              results: recommends_result\n            }\n          } = await movieApi.getSimilarMovies(parsedIntId, 1));\n        } else {\n          ({\n            data: result\n          } = await tvApi.showDetail(parsedIntId));\n          ({\n            data: {\n              cast: casts_result\n            }\n          } = await tvApi.getCasts(parsedIntId));\n        }\n      } catch {\n        // If api couldn't get data\n        // 임시로\n        // return push(\"/\");\n        this.setState({\n          error: \"Can not find anything\"\n        });\n      } finally {\n        this.setState({\n          loading: false,\n          result,\n          casts_result,\n          recommends_result\n        });\n      }\n    };\n\n    this.changeParam = id => {\n      const {\n        history: {\n          push\n        }\n      } = this.props;\n      push(`/movie/${id}`);\n    };\n\n    const {\n      location: {\n        pathname\n      }\n    } = props;\n    this.state = {\n      result: null,\n      casts_result: null,\n      recommends_result: null,\n      error: null,\n      loading: true,\n      isMovie: pathname.includes(\"/movie/\"),\n      modal: false,\n      modalType: null\n    };\n  }\n\n  async componentDidMount() {\n    console.log(\"Did Mount !! in Detail \"); // console.log(this.props);\n\n    this.getData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      match: {\n        params: {\n          id: prevId\n        }\n      }\n    } = prevProps;\n    const {\n      match: {\n        params: {\n          id: nowId\n        }\n      }\n    } = this.props;\n    console.log(prevId, nowId);\n\n    if (prevId !== nowId) {\n      this.getData();\n    }\n  }\n\n  render() {\n    const {\n      result,\n      casts_result,\n      recommends_result,\n      error,\n      loading,\n      isMovie\n    } = this.state;\n    return /*#__PURE__*/React.createElement(DetailPresenter, {\n      result: result,\n      casts_result: casts_result,\n      recommends_result: recommends_result,\n      error: error,\n      loading: loading,\n      isMovie: isMovie,\n      changeParam: this.changeParam,\n      handleOpenModal: this.handleOpenModal,\n      handleCloseModal: this.handleCloseModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/Documents/React/DaroFlix/src/Routes/Detail/DetailContainer.js"],"names":["React","DetailPresenter","movieApi","tvApi","Component","constructor","props","getData","match","params","id","history","push","isMovie","state","parsedIntId","parseInt","isNaN","result","casts_result","recommends_result","data","movieDetail","cast","getCasts","results","getSimilarMovies","showDetail","setState","error","loading","changeParam","location","pathname","includes","modal","modalType","componentDidMount","console","log","componentDidUpdate","prevProps","prevId","nowId","render","handleOpenModal","handleCloseModal"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { movieApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      location: { pathname },\r\n    } = props;\r\n\r\n    this.state = {\r\n      result: null,\r\n      casts_result: null,\r\n      recommends_result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\"),\r\n      modal: false,\r\n      modalType: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    console.log(\"Did Mount !! in Detail \");\r\n    // console.log(this.props);\r\n    this.getData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      match: {\r\n        params: { id: prevId },\r\n      },\r\n    } = prevProps;\r\n    const {\r\n      match: {\r\n        params: { id: nowId },\r\n      },\r\n    } = this.props;\r\n    console.log(prevId, nowId);\r\n    if (prevId !== nowId) {\r\n      this.getData();\r\n    }\r\n  }\r\n  getData = async () => {\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push },\r\n    } = this.props;\r\n\r\n    const { isMovie } = this.state;\r\n    const parsedIntId = parseInt(id);\r\n    if (isNaN(parsedIntId)) {\r\n      return push(\"/\");\r\n    }\r\n    let result = null;\r\n    let casts_result = null;\r\n    let recommends_result = null;\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await movieApi.movieDetail(parsedIntId));\r\n        ({\r\n          data: { cast: casts_result },\r\n        } = await movieApi.getCasts(parsedIntId));\r\n        ({\r\n          data: { results: recommends_result },\r\n        } = await movieApi.getSimilarMovies(parsedIntId, 1));\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parsedIntId));\r\n        ({\r\n          data: { cast: casts_result },\r\n        } = await tvApi.getCasts(parsedIntId));\r\n      }\r\n    } catch {\r\n      // If api couldn't get data\r\n      // 임시로\r\n      // return push(\"/\");\r\n      this.setState({ error: \"Can not find anything\" });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n        result,\r\n        casts_result,\r\n        recommends_result,\r\n      });\r\n    }\r\n  };\r\n  changeParam = (id) => {\r\n    const {\r\n      history: { push },\r\n    } = this.props;\r\n    push(`/movie/${id}`);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      result,\r\n      casts_result,\r\n      recommends_result,\r\n      error,\r\n      loading,\r\n      isMovie,\r\n    } = this.state;\r\n    return (\r\n      <DetailPresenter\r\n        result={result}\r\n        casts_result={casts_result}\r\n        recommends_result={recommends_result}\r\n        error={error}\r\n        loading={loading}\r\n        isMovie={isMovie}\r\n        changeParam={this.changeParam}\r\n        handleOpenModal={this.handleOpenModal}\r\n        handleCloseModal={this.handleCloseModal}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}