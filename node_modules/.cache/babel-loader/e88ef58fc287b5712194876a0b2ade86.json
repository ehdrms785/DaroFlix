{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\React\\\\DaroFlix\\\\src\\\\Routes\\\\Search\\\\SearchContainer.js\";\nimport React from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { movieApi, tvApi } from \"../../api\";\nimport { Redirect } from \"react-router\";\nexport default class extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movieResults: null,\n      tvResults: null,\n      searchTerm: \"\",\n      error: null,\n      loading: false\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        searchTerm\n      } = this.state;\n\n      if (searchTerm !== \"\") {\n        this.searchByTerm(searchTerm);\n        this.props.history.push(`/search?query=${searchTerm}`);\n      }\n    };\n\n    this.updateTerm = event => {\n      const {\n        target: {\n          value\n        }\n      } = event;\n      this.setState({\n        searchTerm: value\n      });\n    };\n\n    this.searchByTerm = async query => {\n      try {\n        this.setState({\n          loading: true\n        });\n        let movieResults = null;\n        let tvResults = null; //   console.log(`query:${query}`);\n        // query 값이 null이면 , null 값을 반환해서 검색 초기상태가 되게 만들기 위한 로직\n        // movieResults = [] 로 초기화를 하면 presenter에서 있는걸로 인식을해서\n        // data를 가져오지 못한걸로 판단해서 메세지를 띄운다.\n\n        if (query) {\n          ({\n            data: {\n              results: movieResults\n            }\n          } = await movieApi.search(query));\n          ({\n            data: {\n              results: tvResults\n            }\n          } = await tvApi.search(query));\n        }\n\n        this.setState({\n          movieResults,\n          tvResults\n        });\n      } catch {\n        this.setState({\n          error: \"Can't find results\"\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n  }\n\n  queryCheck() {\n    const {\n      location: {\n        search\n      }\n    } = this.props;\n    const params = new URLSearchParams(search);\n    const query = params.get(\"query\"); //   console.log(`query: ${query}`);\n\n    if (query === null) {\n      // 현재 query가 아무값도 없을때 ! searchTerm 초기화시켜주고 리렌더링 그리고 url 이동!\n      this.setState({\n        searchTerm: \"\"\n      });\n      this.props.history.push(\"/search\");\n    } else {\n      this.setState({\n        searchTerm: query\n      });\n    }\n\n    this.searchByTerm(query);\n  }\n\n  componentDidMount() {\n    this.queryCheck();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      location: {\n        search: prevSearch\n      }\n    } = prevProps;\n    const {\n      location: {\n        search: nowSearch\n      }\n    } = this.props; // console.log(prevSearch, nowSearch);\n\n    if (prevSearch !== nowSearch) {\n      this.queryCheck();\n    }\n  }\n\n  render() {\n    const {\n      movieResults,\n      tvResults,\n      searchTerm,\n      error,\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(SearchPresenter, {\n      movieResults: movieResults,\n      tvResults: tvResults,\n      searchTerm: searchTerm,\n      error: error,\n      loading: loading,\n      handleSubmit: this.handleSubmit,\n      updateTerm: this.updateTerm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/Documents/React/DaroFlix/src/Routes/Search/SearchContainer.js"],"names":["React","SearchPresenter","movieApi","tvApi","Redirect","Component","state","movieResults","tvResults","searchTerm","error","loading","handleSubmit","event","preventDefault","searchByTerm","props","history","push","updateTerm","target","value","setState","query","data","results","search","queryCheck","location","params","URLSearchParams","get","componentDidMount","componentDidUpdate","prevProps","prevSearch","nowSearch","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { movieApi, tvApi } from \"../../api\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    error: null,\r\n    loading: false,\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm(searchTerm);\r\n      this.props.history.push(`/search?query=${searchTerm}`);\r\n    }\r\n  };\r\n  updateTerm = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    this.setState({\r\n      searchTerm: value,\r\n    });\r\n  };\r\n\r\n  searchByTerm = async (query) => {\r\n    try {\r\n      this.setState({ loading: true });\r\n      let movieResults = null;\r\n      let tvResults = null;\r\n      //   console.log(`query:${query}`);\r\n      // query 값이 null이면 , null 값을 반환해서 검색 초기상태가 되게 만들기 위한 로직\r\n      // movieResults = [] 로 초기화를 하면 presenter에서 있는걸로 인식을해서\r\n      // data를 가져오지 못한걸로 판단해서 메세지를 띄운다.\r\n      if (query) {\r\n        ({\r\n          data: { results: movieResults },\r\n        } = await movieApi.search(query));\r\n        ({\r\n          data: { results: tvResults },\r\n        } = await tvApi.search(query));\r\n      }\r\n      this.setState({\r\n        movieResults,\r\n        tvResults,\r\n      });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find results\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  };\r\n  queryCheck() {\r\n    const {\r\n      location: { search },\r\n    } = this.props;\r\n    const params = new URLSearchParams(search);\r\n    const query = params.get(\"query\");\r\n    //   console.log(`query: ${query}`);\r\n    if (query === null) {\r\n      // 현재 query가 아무값도 없을때 ! searchTerm 초기화시켜주고 리렌더링 그리고 url 이동!\r\n      this.setState({ searchTerm: \"\" });\r\n      this.props.history.push(\"/search\");\r\n    } else {\r\n      this.setState({ searchTerm: query });\r\n    }\r\n    this.searchByTerm(query);\r\n  }\r\n  componentDidMount() {\r\n    this.queryCheck();\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      location: { search: prevSearch },\r\n    } = prevProps;\r\n    const {\r\n      location: { search: nowSearch },\r\n    } = this.props;\r\n    // console.log(prevSearch, nowSearch);\r\n\r\n    if (prevSearch !== nowSearch) {\r\n      this.queryCheck();\r\n    }\r\n  }\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, error, loading } = this.state;\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        error={error}\r\n        loading={loading}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}