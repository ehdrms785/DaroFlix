{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\React\\\\DaroFlix\\\\src\\\\Components\\\\DetailTab\\\\DetailTabContainer.js\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport DetailTabHeader from \"./DetailTabHeader\";\nimport TabYoutube from \"./TabYoutube\";\nimport TabSimilar from \"./TabSimilar\";\nimport TabSeason from \"./TabSeason\";\nimport TabCasts from \"./TabCasts\";\nimport { movieApi } from \"../../api\";\nimport Loading from \"../Loading\";\nconst Container = styled.div`\n  display: block;\n  width: 80%;\n  background-color: rgba(30, 30, 30, 0.8);\n  height: 100%;\n  /* max-height: 400px; */\n  max-height: 430px;\n  margin-bottom: 20px;\n`;\nexport default class DetailTabContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedButton: null,\n      seasons: null,\n      results: null,\n      loading: true\n    };\n\n    this.handleClick = selectedButton => {\n      this.setState({\n        selectedButton\n      });\n    };\n  }\n\n  async getRecommendsMovies() {\n    const {\n      result: {\n        id: movie_id\n      }\n    } = this.props;\n    let recommends_result = null;\n\n    try {\n      ({\n        data: {\n          results: recommends_result\n        }\n      } = await movieApi.getSimilarMovies(movie_id, 1));\n    } catch (e) {\n      this.setState({\n        error: \"Can not find Similar Data from API\"\n      });\n    } finally {\n      this.setState({\n        loading: false,\n        recommends_result\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      result: {\n        id: prev_movie_id\n      }\n    } = prevProps;\n    const {\n      result: {\n        id: now_movie_id\n      }\n    } = this.props;\n\n    if (prev_movie_id !== now_movie_id) {\n      this.getRecommendsMovies();\n      this.buttonCheckAndUpdate();\n    }\n  }\n\n  buttonCheckAndUpdate() {\n    let selectedButton = null;\n    const {\n      result: {\n        videos: {\n          results\n        }\n      },\n      casts_result,\n      recommends_result,\n      isMovie\n    } = this.props;\n    let seasons = null;\n\n    if (isMovie) {} else {\n      ({\n        result: {\n          seasons: seasons\n        }\n      } = this.props);\n    } // 유튜브 비디오 체크 & 버튼 활성화\n\n\n    if (results && results.length > 0) {\n      selectedButton = \"Youtube\"; // 캐스팅 체크 &  버튼 활성화\n    } else if (casts_result && casts_result.length > 0) {\n      selectedButton = \"Casts\";\n    } // 추천영화(비슷한영화[Movie Only])체크 & 버튼 활성화\n    else if (recommends_result && recommends_result.length > 0) {\n        selectedButton = \"Recommends\";\n      } // 시즌(TV Only) & 버튼 활성화\n      else if (seasons && seasons.length > 0) {\n          selectedButton = \"Seasons\";\n        }\n\n    this.setState({\n      selectedButton,\n      loading: false\n    });\n  }\n\n  componentDidMount() {\n    this.getRecommendsMovies();\n    this.buttonCheckAndUpdate();\n  }\n\n  render() {\n    const {\n      selectedButton,\n      loading\n    } = this.state; // 최적화를 위해서 한 번 시도\n    // 로딩이 false 이면 굳이 밑에 것들을 가져와서 체크 할 필요가 없지 않을까?\n    // 그럴 필요는 없다는 결론 그래서 loading === false로 걸러주기로함\n\n    if (loading === false) {\n      const {\n        result: {\n          videos: {\n            results\n          }\n        },\n        casts_result,\n        recommends_result,\n        result: {\n          id: movie_id\n        },\n        isMovie\n      } = this.props; // 밑에서 isSeasons를 체크하기 위해서 미리 초기화\n\n      let seasons = null;\n\n      if (!isMovie) {\n        ({\n          result: {\n            seasons: seasons\n          }\n        } = this.props);\n      }\n\n      const isVideos = results && results.length > 0;\n      const isCasts = casts_result && casts_result.length > 0; // const isCompanies = production_companies && production_companies.length > 0;\n\n      const isRecommends = recommends_result && recommends_result.length > 0;\n      const isSeasons = seasons && seasons.length > 0;\n      /* If selectedButton is null, wait til next rendering  */\n\n      return loading ? /*#__PURE__*/React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }) : selectedButton ? /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DetailTabHeader, {\n        isVideos: isVideos,\n        isCasts: isCasts,\n        isRecommends: isRecommends,\n        isSeasons: isSeasons,\n        handleClick: this.handleClick,\n        selectedButton: selectedButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }\n      }), selectedButton === \"Youtube\" && isVideos && results.length > 0 && /*#__PURE__*/React.createElement(TabYoutube, {\n        youtubeKey: results[0].key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }), selectedButton === \"Casts\" && casts_result.length > 0 && /*#__PURE__*/React.createElement(TabCasts, {\n        casts_result: casts_result,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }\n      }), selectedButton === \"Recommends\" && recommends_result.length > 0 && /*#__PURE__*/React.createElement(TabSimilar, {\n        recommends_result: recommends_result,\n        movie_id: movie_id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }\n      }), selectedButton === \"Seasons\" && seasons.length > 0 && /*#__PURE__*/React.createElement(TabSeason, {\n        seasons: seasons,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      })) : null;\n    } // == if(loading === true) 일 때는 굳이 아무것도 렌더링 시키지 않는다\n    // 굳이 필요가 없기 때문 (최적화용)\n    else {\n        return null;\n      }\n  }\n\n}","map":{"version":3,"sources":["D:/Documents/React/DaroFlix/src/Components/DetailTab/DetailTabContainer.js"],"names":["React","Component","styled","DetailTabHeader","TabYoutube","TabSimilar","TabSeason","TabCasts","movieApi","Loading","Container","div","DetailTabContainer","state","selectedButton","seasons","results","loading","handleClick","setState","getRecommendsMovies","result","id","movie_id","props","recommends_result","data","getSimilarMovies","e","error","componentDidUpdate","prevProps","prev_movie_id","now_movie_id","buttonCheckAndUpdate","videos","casts_result","isMovie","length","componentDidMount","render","isVideos","isCasts","isRecommends","isSeasons","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,MAAMC,SAAS,GAAGR,MAAM,CAACS,GAAI;;;;;;;;CAA7B;AAUA,eAAe,MAAMC,kBAAN,SAAiCX,SAAjC,CAA2C;AAAA;AAAA;AAAA,SACxDY,KADwD,GAChD;AACNC,MAAAA,cAAc,EAAE,IADV;AAENC,MAAAA,OAAO,EAAE,IAFH;AAGNC,MAAAA,OAAO,EAAE,IAHH;AAINC,MAAAA,OAAO,EAAE;AAJH,KADgD;;AAAA,SAgFxDC,WAhFwD,GAgFzCJ,cAAD,IAAoB;AAChC,WAAKK,QAAL,CAAc;AACZL,QAAAA;AADY,OAAd;AAGD,KApFuD;AAAA;;AAOxD,QAAMM,mBAAN,GAA4B;AAC1B,UAAM;AACJC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,EAAE,EAAEC;AAAN;AADJ,QAEF,KAAKC,KAFT;AAIA,QAAIC,iBAAiB,GAAG,IAAxB;;AACA,QAAI;AACF,OAAC;AACCC,QAAAA,IAAI,EAAE;AAAEV,UAAAA,OAAO,EAAES;AAAX;AADP,UAEG,MAAMjB,QAAQ,CAACmB,gBAAT,CAA0BJ,QAA1B,EAAoC,CAApC,CAFV;AAGD,KAJD,CAIE,OAAOK,CAAP,EAAU;AACV,WAAKT,QAAL,CAAc;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KAND,SAMU;AACR,WAAKV,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAE,KAAX;AAAkBQ,QAAAA;AAAlB,OAAd;AACD;AACF;;AAEDK,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAM;AACJV,MAAAA,MAAM,EAAE;AAAEC,QAAAA,EAAE,EAAEU;AAAN;AADJ,QAEFD,SAFJ;AAGA,UAAM;AACJV,MAAAA,MAAM,EAAE;AAAEC,QAAAA,EAAE,EAAEW;AAAN;AADJ,QAEF,KAAKT,KAFT;;AAIA,QAAIQ,aAAa,KAAKC,YAAtB,EAAoC;AAClC,WAAKb,mBAAL;AACA,WAAKc,oBAAL;AACD;AACF;;AACDA,EAAAA,oBAAoB,GAAG;AACrB,QAAIpB,cAAc,GAAG,IAArB;AACA,UAAM;AACJO,MAAAA,MAAM,EAAE;AACNc,QAAAA,MAAM,EAAE;AAAEnB,UAAAA;AAAF;AADF,OADJ;AAIJoB,MAAAA,YAJI;AAKJX,MAAAA,iBALI;AAMJY,MAAAA;AANI,QAOF,KAAKb,KAPT;AAQA,QAAIT,OAAO,GAAG,IAAd;;AACA,QAAIsB,OAAJ,EAAa,CACZ,CADD,MACO;AACL,OAAC;AACChB,QAAAA,MAAM,EAAE;AAAEN,UAAAA,OAAO,EAAEA;AAAX;AADT,UAEG,KAAKS,KAFT;AAGD,KAhBoB,CAkBrB;;;AACA,QAAIR,OAAO,IAAIA,OAAO,CAACsB,MAAR,GAAiB,CAAhC,EAAmC;AACjCxB,MAAAA,cAAc,GAAG,SAAjB,CADiC,CAEjC;AACD,KAHD,MAGO,IAAIsB,YAAY,IAAIA,YAAY,CAACE,MAAb,GAAsB,CAA1C,EAA6C;AAClDxB,MAAAA,cAAc,GAAG,OAAjB;AACD,KAFM,CAGP;AAHO,SAIF,IAAIW,iBAAiB,IAAIA,iBAAiB,CAACa,MAAlB,GAA2B,CAApD,EAAuD;AAC1DxB,QAAAA,cAAc,GAAG,YAAjB;AACD,OAFI,CAGL;AAHK,WAIA,IAAIC,OAAO,IAAIA,OAAO,CAACuB,MAAR,GAAiB,CAAhC,EAAmC;AACtCxB,UAAAA,cAAc,GAAG,SAAjB;AACD;;AACD,SAAKK,QAAL,CAAc;AACZL,MAAAA,cADY;AAEZG,MAAAA,OAAO,EAAE;AAFG,KAAd;AAID;;AACDsB,EAAAA,iBAAiB,GAAG;AAClB,SAAKnB,mBAAL;AACA,SAAKc,oBAAL;AACD;;AAQDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE1B,MAAAA,cAAF;AAAkBG,MAAAA;AAAlB,QAA8B,KAAKJ,KAAzC,CADO,CAEP;AACA;AACA;;AAEA,QAAII,OAAO,KAAK,KAAhB,EAAuB;AACrB,YAAM;AACJI,QAAAA,MAAM,EAAE;AACNc,UAAAA,MAAM,EAAE;AAAEnB,YAAAA;AAAF;AADF,SADJ;AAIJoB,QAAAA,YAJI;AAKJX,QAAAA,iBALI;AAMJJ,QAAAA,MAAM,EAAE;AAAEC,UAAAA,EAAE,EAAEC;AAAN,SANJ;AAOJc,QAAAA;AAPI,UAQF,KAAKb,KART,CADqB,CAUrB;;AACA,UAAIT,OAAO,GAAG,IAAd;;AACA,UAAI,CAACsB,OAAL,EAAc;AACZ,SAAC;AACChB,UAAAA,MAAM,EAAE;AAAEN,YAAAA,OAAO,EAAEA;AAAX;AADT,YAEG,KAAKS,KAFT;AAGD;;AAED,YAAMiB,QAAQ,GAAGzB,OAAO,IAAIA,OAAO,CAACsB,MAAR,GAAiB,CAA7C;AACA,YAAMI,OAAO,GAAGN,YAAY,IAAIA,YAAY,CAACE,MAAb,GAAsB,CAAtD,CAnBqB,CAoBrB;;AACA,YAAMK,YAAY,GAAGlB,iBAAiB,IAAIA,iBAAiB,CAACa,MAAlB,GAA2B,CAArE;AACA,YAAMM,SAAS,GAAG7B,OAAO,IAAIA,OAAO,CAACuB,MAAR,GAAiB,CAA9C;AAEA;;AACA,aAAOrB,OAAO,gBACZ,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADY,GAEVH,cAAc,gBAChB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,eAAD;AACE,QAAA,QAAQ,EAAE2B,QADZ;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,YAAY,EAAEC,YAHhB;AAIE,QAAA,SAAS,EAAEC,SAJb;AAKE,QAAA,WAAW,EAAE,KAAK1B,WALpB;AAME,QAAA,cAAc,EAAEJ,cANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EASGA,cAAc,KAAK,SAAnB,IAAgC2B,QAAhC,IAA4CzB,OAAO,CAACsB,MAAR,GAAiB,CAA7D,iBACC,oBAAC,UAAD;AAAY,QAAA,UAAU,EAAEtB,OAAO,CAAC,CAAD,CAAP,CAAW6B,GAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVJ,EAYG/B,cAAc,KAAK,OAAnB,IAA8BsB,YAAY,CAACE,MAAb,GAAsB,CAApD,iBACC,oBAAC,QAAD;AAAU,QAAA,YAAY,EAAEF,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbJ,EAeGtB,cAAc,KAAK,YAAnB,IAAmCW,iBAAiB,CAACa,MAAlB,GAA2B,CAA9D,iBACC,oBAAC,UAAD;AACE,QAAA,iBAAiB,EAAEb,iBADrB;AAEE,QAAA,QAAQ,EAAEF,QAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBJ,EAqBGT,cAAc,KAAK,SAAnB,IAAgCC,OAAO,CAACuB,MAAR,GAAiB,CAAjD,iBACC,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAEvB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBJ,CADgB,GA0Bd,IA5BJ;AA6BD,KAtDD,CAuDA;AACA;AAxDA,SAyDK;AACH,eAAO,IAAP;AACD;AACF;;AAxJuD","sourcesContent":["import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DetailTabHeader from \"./DetailTabHeader\";\r\nimport TabYoutube from \"./TabYoutube\";\r\nimport TabSimilar from \"./TabSimilar\";\r\nimport TabSeason from \"./TabSeason\";\r\nimport TabCasts from \"./TabCasts\";\r\nimport { movieApi } from \"../../api\";\r\nimport Loading from \"../Loading\";\r\nconst Container = styled.div`\r\n  display: block;\r\n  width: 80%;\r\n  background-color: rgba(30, 30, 30, 0.8);\r\n  height: 100%;\r\n  /* max-height: 400px; */\r\n  max-height: 430px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport default class DetailTabContainer extends Component {\r\n  state = {\r\n    selectedButton: null,\r\n    seasons: null,\r\n    results: null,\r\n    loading: true,\r\n  };\r\n  async getRecommendsMovies() {\r\n    const {\r\n      result: { id: movie_id },\r\n    } = this.props;\r\n\r\n    let recommends_result = null;\r\n    try {\r\n      ({\r\n        data: { results: recommends_result },\r\n      } = await movieApi.getSimilarMovies(movie_id, 1));\r\n    } catch (e) {\r\n      this.setState({ error: \"Can not find Similar Data from API\" });\r\n    } finally {\r\n      this.setState({ loading: false, recommends_result });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      result: { id: prev_movie_id },\r\n    } = prevProps;\r\n    const {\r\n      result: { id: now_movie_id },\r\n    } = this.props;\r\n\r\n    if (prev_movie_id !== now_movie_id) {\r\n      this.getRecommendsMovies();\r\n      this.buttonCheckAndUpdate();\r\n    }\r\n  }\r\n  buttonCheckAndUpdate() {\r\n    let selectedButton = null;\r\n    const {\r\n      result: {\r\n        videos: { results },\r\n      },\r\n      casts_result,\r\n      recommends_result,\r\n      isMovie,\r\n    } = this.props;\r\n    let seasons = null;\r\n    if (isMovie) {\r\n    } else {\r\n      ({\r\n        result: { seasons: seasons },\r\n      } = this.props);\r\n    }\r\n\r\n    // 유튜브 비디오 체크 & 버튼 활성화\r\n    if (results && results.length > 0) {\r\n      selectedButton = \"Youtube\";\r\n      // 캐스팅 체크 &  버튼 활성화\r\n    } else if (casts_result && casts_result.length > 0) {\r\n      selectedButton = \"Casts\";\r\n    }\r\n    // 추천영화(비슷한영화[Movie Only])체크 & 버튼 활성화\r\n    else if (recommends_result && recommends_result.length > 0) {\r\n      selectedButton = \"Recommends\";\r\n    }\r\n    // 시즌(TV Only) & 버튼 활성화\r\n    else if (seasons && seasons.length > 0) {\r\n      selectedButton = \"Seasons\";\r\n    }\r\n    this.setState({\r\n      selectedButton,\r\n      loading: false,\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.getRecommendsMovies();\r\n    this.buttonCheckAndUpdate();\r\n  }\r\n\r\n  handleClick = (selectedButton) => {\r\n    this.setState({\r\n      selectedButton,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { selectedButton, loading } = this.state;\r\n    // 최적화를 위해서 한 번 시도\r\n    // 로딩이 false 이면 굳이 밑에 것들을 가져와서 체크 할 필요가 없지 않을까?\r\n    // 그럴 필요는 없다는 결론 그래서 loading === false로 걸러주기로함\r\n\r\n    if (loading === false) {\r\n      const {\r\n        result: {\r\n          videos: { results },\r\n        },\r\n        casts_result,\r\n        recommends_result,\r\n        result: { id: movie_id },\r\n        isMovie,\r\n      } = this.props;\r\n      // 밑에서 isSeasons를 체크하기 위해서 미리 초기화\r\n      let seasons = null;\r\n      if (!isMovie) {\r\n        ({\r\n          result: { seasons: seasons },\r\n        } = this.props);\r\n      }\r\n\r\n      const isVideos = results && results.length > 0;\r\n      const isCasts = casts_result && casts_result.length > 0;\r\n      // const isCompanies = production_companies && production_companies.length > 0;\r\n      const isRecommends = recommends_result && recommends_result.length > 0;\r\n      const isSeasons = seasons && seasons.length > 0;\r\n\r\n      /* If selectedButton is null, wait til next rendering  */\r\n      return loading ? (\r\n        <Loading />\r\n      ) : selectedButton ? (\r\n        <Container>\r\n          <DetailTabHeader\r\n            isVideos={isVideos}\r\n            isCasts={isCasts}\r\n            isRecommends={isRecommends}\r\n            isSeasons={isSeasons}\r\n            handleClick={this.handleClick}\r\n            selectedButton={selectedButton}\r\n          />\r\n          {selectedButton === \"Youtube\" && isVideos && results.length > 0 && (\r\n            <TabYoutube youtubeKey={results[0].key} />\r\n          )}\r\n          {selectedButton === \"Casts\" && casts_result.length > 0 && (\r\n            <TabCasts casts_result={casts_result} />\r\n          )}\r\n          {selectedButton === \"Recommends\" && recommends_result.length > 0 && (\r\n            <TabSimilar\r\n              recommends_result={recommends_result}\r\n              movie_id={movie_id}\r\n            />\r\n          )}\r\n          {selectedButton === \"Seasons\" && seasons.length > 0 && (\r\n            <TabSeason seasons={seasons} />\r\n          )}\r\n        </Container>\r\n      ) : null;\r\n    }\r\n    // == if(loading === true) 일 때는 굳이 아무것도 렌더링 시키지 않는다\r\n    // 굳이 필요가 없기 때문 (최적화용)\r\n    else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}