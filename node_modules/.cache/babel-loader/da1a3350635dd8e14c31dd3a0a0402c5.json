{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\React\\\\DaroFlix\\\\src\\\\Routes\\\\ViewMore\\\\ViewMoreContainer.js\";\nimport React from \"react\";\nimport ViewMorePresenter from \"./ViewMorePresenter\";\nimport { movieApi, tvApi } from \"../../api\";\nexport default class extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      results: null,\n      loading: true,\n      error: null,\n      page: 3,\n      scroll: false\n    };\n  }\n\n  async getData() {\n    const {\n      match: {\n        params: {\n          type,\n          subject,\n          query\n        }\n      }\n    } = this.props;\n    console.log(`type:${type} , subject:${subject}, query:${query}`);\n\n    try {\n      if (type === \"movie\") {\n        let movies1 = [];\n        let movies2 = [];\n\n        if (subject === \"upComing\") {\n          ({\n            data: {\n              results: movies1\n            }\n          } = await movieApi.upComing(1));\n          ({\n            data: {\n              results: movies2\n            }\n          } = await movieApi.upComing(2));\n        } else if (subject === \"nowPlaying\") {\n          ({\n            data: {\n              results: movies1\n            }\n          } = await movieApi.nowPlaying(1));\n          ({\n            data: {\n              results: movies2\n            }\n          } = await movieApi.nowPlaying(2));\n        } else if (subject === \"popular\") {\n          ({\n            data: {\n              results: movies1\n            }\n          } = await movieApi.popular(1));\n          ({\n            data: {\n              results: movies2\n            }\n          } = await movieApi.popular(2));\n        } else if (subject === \"search\") {\n          ({\n            data: {\n              results: movies1\n            }\n          } = await movieApi.search(query, 1));\n          ({\n            data: {\n              results: movies2\n            }\n          } = await movieApi.search(query, 2));\n        }\n\n        const movies = [...movies1, ...movies2];\n        this.setState({\n          results: movies\n        });\n      } else if (type === \"show\") {\n        let shows1 = [];\n        let shows2 = [];\n\n        if (subject === \"popular\") {\n          ({\n            data: {\n              results: shows1\n            }\n          } = await tvApi.popular(1));\n          ({\n            data: {\n              results: shows2\n            }\n          } = await tvApi.popular(2));\n        } else if (subject === \"topRated\") {\n          ({\n            data: {\n              results: shows1\n            }\n          } = await tvApi.topRated(1));\n          ({\n            data: {\n              results: shows2\n            }\n          } = await tvApi.topRated(2));\n        } else if (subject === \"airingToday\") {\n          ({\n            data: {\n              results: shows1\n            }\n          } = await tvApi.airingToday(1));\n          ({\n            data: {\n              results: shows2\n            }\n          } = await tvApi.airingToday(2));\n        }\n\n        const shows = [...shows1, ...shows2];\n        this.setState({\n          results: shows\n        });\n      }\n    } catch {\n      this.setState({\n        error: \"Can not find View More Data from API\"\n      });\n    } finally {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  async getDataMore(page) {\n    const {\n      match: {\n        params: {\n          type,\n          subject,\n          query\n        }\n      }\n    } = this.props;\n    const {\n      results,\n      scroll\n    } = this.state; // dconsole.log(`${type} and ${subject} and ${query}`);\n\n    try {\n      if (scroll) {\n        if (type === \"movie\") {\n          let movies1 = [];\n\n          if (subject === \"upComing\") {\n            ({\n              data: {\n                results: movies1\n              }\n            } = await movieApi.upComing(page));\n          }\n\n          if (subject === \"nowPlaying\") {\n            ({\n              data: {\n                results: movies1\n              }\n            } = await movieApi.nowPlaying(page));\n          }\n\n          if (subject === \"popular\") {\n            ({\n              data: {\n                results: movies1\n              }\n            } = await movieApi.popular(page));\n          }\n\n          if (subject === \"search\") {\n            ({\n              data: {\n                results: movies1\n              }\n            } = await movieApi.search(query, page));\n          }\n\n          const movies = [...results, ...movies1]; // console.log(`${type} and ${subject} and ${page}`);\n          // console.log(movies1);\n\n          /*  만약 movies1.length가 0이면 (더이상 가져올 데이터가 없으면)\r\n            페이지업그레이드 안하고 스테이트 업데이트도 안하고 그대로 둔다 */\n\n          if (movies1.length > 0) {\n            this.setState(current => ({\n              results: movies,\n              scroll: false,\n              page: current.page + 1\n            }));\n          }\n        } else if (type === \"show\") {\n          let shows1 = [];\n\n          if (subject === \"popular\") {\n            ({\n              data: {\n                results: shows1\n              }\n            } = await tvApi.popular(page));\n          }\n\n          if (subject === \"topRated\") {\n            ({\n              data: {\n                results: shows1\n              }\n            } = await tvApi.topRated(page));\n          }\n\n          if (subject === \"airingToday\") {\n            ({\n              data: {\n                results: shows1\n              }\n            } = await tvApi.airingToday(page));\n          }\n\n          const movies = [...results, ...shows1];\n          this.setState(current => ({\n            results: movies,\n            scroll: false,\n            page: current.page + 1\n          }));\n        }\n      }\n    } catch {\n      this.setState({\n        error: \"Can not find Data from APIzz\"\n      });\n    } finally {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  infiniteScroll(e) {\n    const {\n      clientHeight,\n      scrollHeight\n    } = document.documentElement;\n    console.log(window);\n    const {\n      results,\n      scroll\n    } = this.state; // if (results && scrollTop + clientHeight >= scrollHeight - 600) {\n\n    if (results && window.scrollY + clientHeight >= scrollHeight - 600) {\n      // ㄴ window.scrollY 를 사용하면 모바일에서 작동이 되더라 + IE9 이하에서는 pageOffset을 써 줘야한다\n      // ㄴ state의 results 값을 체크해주지 않으면\n      // ㄴ 스크롤이 내려가있는 상태에서 새로고침시 getData 값을 가져오기 이전에\n      // ㄴ getDataMore를 실행해버린다 (그러면서 오류가 발생한다)\n      // ㄴ\n      if (scroll === false) {\n        // ㄴ 이렇게 걸러주지 않으면 스크롤이 내려가서 추가로드할때 로드가 완료될때까지 (false로 돌아올때까지)\n        // ㄴ 계속 this.setState를 실행시켜서 필요없는 렌더링을 몇번이고 한다\n        this.setState({\n          scroll: true\n        });\n        this.getDataMore(this.state.page);\n      }\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"didMount!\");\n    this.getData();\n    window.addEventListener(\"scroll\", this.infiniteScroll.bind(this));\n  }\n\n  componentDidUpdate() {}\n\n  render() {\n    const {\n      match: {\n        params: {\n          type,\n          subject\n        }\n      }\n    } = this.props;\n    const {\n      results,\n      loading,\n      error\n    } = this.state; //console.log(results);\n\n    return /*#__PURE__*/React.createElement(ViewMorePresenter, {\n      results: results,\n      loading: loading,\n      error: error,\n      isMovie: type === \"movie\",\n      subject: subject,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/Documents/React/DaroFlix/src/Routes/ViewMore/ViewMoreContainer.js"],"names":["React","ViewMorePresenter","movieApi","tvApi","Component","state","results","loading","error","page","scroll","getData","match","params","type","subject","query","props","console","log","movies1","movies2","data","upComing","nowPlaying","popular","search","movies","setState","shows1","shows2","topRated","airingToday","shows","getDataMore","length","current","infiniteScroll","e","clientHeight","scrollHeight","document","documentElement","window","scrollY","componentDidMount","addEventListener","bind","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ViewMorePresenter from \"./ViewMorePresenter\";\r\nimport { movieApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    results: null,\r\n    loading: true,\r\n    error: null,\r\n    page: 3,\r\n    scroll: false,\r\n  };\r\n\r\n  async getData() {\r\n    const {\r\n      match: {\r\n        params: { type, subject, query },\r\n      },\r\n    } = this.props;\r\n    console.log(`type:${type} , subject:${subject}, query:${query}`);\r\n\r\n    try {\r\n      if (type === \"movie\") {\r\n        let movies1 = [];\r\n        let movies2 = [];\r\n        if (subject === \"upComing\") {\r\n          ({\r\n            data: { results: movies1 },\r\n          } = await movieApi.upComing(1));\r\n          ({\r\n            data: { results: movies2 },\r\n          } = await movieApi.upComing(2));\r\n        } else if (subject === \"nowPlaying\") {\r\n          ({\r\n            data: { results: movies1 },\r\n          } = await movieApi.nowPlaying(1));\r\n          ({\r\n            data: { results: movies2 },\r\n          } = await movieApi.nowPlaying(2));\r\n        } else if (subject === \"popular\") {\r\n          ({\r\n            data: { results: movies1 },\r\n          } = await movieApi.popular(1));\r\n          ({\r\n            data: { results: movies2 },\r\n          } = await movieApi.popular(2));\r\n        } else if (subject === \"search\") {\r\n          ({\r\n            data: { results: movies1 },\r\n          } = await movieApi.search(query, 1));\r\n          ({\r\n            data: { results: movies2 },\r\n          } = await movieApi.search(query, 2));\r\n        }\r\n        const movies = [...movies1, ...movies2];\r\n        this.setState({\r\n          results: movies,\r\n        });\r\n      } else if (type === \"show\") {\r\n        let shows1 = [];\r\n        let shows2 = [];\r\n        if (subject === \"popular\") {\r\n          ({\r\n            data: { results: shows1 },\r\n          } = await tvApi.popular(1));\r\n          ({\r\n            data: { results: shows2 },\r\n          } = await tvApi.popular(2));\r\n        } else if (subject === \"topRated\") {\r\n          ({\r\n            data: { results: shows1 },\r\n          } = await tvApi.topRated(1));\r\n          ({\r\n            data: { results: shows2 },\r\n          } = await tvApi.topRated(2));\r\n        } else if (subject === \"airingToday\") {\r\n          ({\r\n            data: { results: shows1 },\r\n          } = await tvApi.airingToday(1));\r\n          ({\r\n            data: { results: shows2 },\r\n          } = await tvApi.airingToday(2));\r\n        }\r\n        const shows = [...shows1, ...shows2];\r\n        this.setState({\r\n          results: shows,\r\n        });\r\n      }\r\n    } catch {\r\n      this.setState({ error: \"Can not find View More Data from API\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n  async getDataMore(page) {\r\n    const {\r\n      match: {\r\n        params: { type, subject, query },\r\n      },\r\n    } = this.props;\r\n    const { results, scroll } = this.state;\r\n    // dconsole.log(`${type} and ${subject} and ${query}`);\r\n    try {\r\n      if (scroll) {\r\n        if (type === \"movie\") {\r\n          let movies1 = [];\r\n\r\n          if (subject === \"upComing\") {\r\n            ({\r\n              data: { results: movies1 },\r\n            } = await movieApi.upComing(page));\r\n          }\r\n          if (subject === \"nowPlaying\") {\r\n            ({\r\n              data: { results: movies1 },\r\n            } = await movieApi.nowPlaying(page));\r\n          }\r\n          if (subject === \"popular\") {\r\n            ({\r\n              data: { results: movies1 },\r\n            } = await movieApi.popular(page));\r\n          }\r\n          if (subject === \"search\") {\r\n            ({\r\n              data: { results: movies1 },\r\n            } = await movieApi.search(query, page));\r\n          }\r\n          const movies = [...results, ...movies1];\r\n          // console.log(`${type} and ${subject} and ${page}`);\r\n          // console.log(movies1);\r\n\r\n          /*  만약 movies1.length가 0이면 (더이상 가져올 데이터가 없으면)\r\n            페이지업그레이드 안하고 스테이트 업데이트도 안하고 그대로 둔다 */\r\n          if (movies1.length > 0) {\r\n            this.setState((current) => ({\r\n              results: movies,\r\n              scroll: false,\r\n              page: current.page + 1,\r\n            }));\r\n          }\r\n        } else if (type === \"show\") {\r\n          let shows1 = [];\r\n          if (subject === \"popular\") {\r\n            ({\r\n              data: { results: shows1 },\r\n            } = await tvApi.popular(page));\r\n          }\r\n          if (subject === \"topRated\") {\r\n            ({\r\n              data: { results: shows1 },\r\n            } = await tvApi.topRated(page));\r\n          }\r\n          if (subject === \"airingToday\") {\r\n            ({\r\n              data: { results: shows1 },\r\n            } = await tvApi.airingToday(page));\r\n          }\r\n          const movies = [...results, ...shows1];\r\n\r\n          this.setState((current) => ({\r\n            results: movies,\r\n            scroll: false,\r\n            page: current.page + 1,\r\n          }));\r\n        }\r\n      }\r\n    } catch {\r\n      this.setState({ error: \"Can not find Data from APIzz\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n  infiniteScroll(e) {\r\n    const { clientHeight, scrollHeight } = document.documentElement;\r\n\r\n    console.log(window);\r\n    const { results, scroll } = this.state;\r\n    // if (results && scrollTop + clientHeight >= scrollHeight - 600) {\r\n    if (results && window.scrollY + clientHeight >= scrollHeight - 600) {\r\n      // ㄴ window.scrollY 를 사용하면 모바일에서 작동이 되더라 + IE9 이하에서는 pageOffset을 써 줘야한다\r\n      // ㄴ state의 results 값을 체크해주지 않으면\r\n      // ㄴ 스크롤이 내려가있는 상태에서 새로고침시 getData 값을 가져오기 이전에\r\n      // ㄴ getDataMore를 실행해버린다 (그러면서 오류가 발생한다)\r\n      // ㄴ\r\n      if (scroll === false) {\r\n        // ㄴ 이렇게 걸러주지 않으면 스크롤이 내려가서 추가로드할때 로드가 완료될때까지 (false로 돌아올때까지)\r\n        // ㄴ 계속 this.setState를 실행시켜서 필요없는 렌더링을 몇번이고 한다\r\n        this.setState({ scroll: true });\r\n        this.getDataMore(this.state.page);\r\n      }\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    console.log(\"didMount!\");\r\n    this.getData();\r\n    window.addEventListener(\"scroll\", this.infiniteScroll.bind(this));\r\n  }\r\n  componentDidUpdate() {}\r\n  render() {\r\n    const {\r\n      match: {\r\n        params: { type, subject },\r\n      },\r\n    } = this.props;\r\n    const { results, loading, error } = this.state;\r\n    //console.log(results);\r\n    return (\r\n      <ViewMorePresenter\r\n        results={results}\r\n        loading={loading}\r\n        error={error}\r\n        isMovie={type === \"movie\"}\r\n        subject={subject}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}